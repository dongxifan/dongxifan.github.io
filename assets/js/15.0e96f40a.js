(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{498:function(a,t,e){"use strict";e.r(t);var n=e(21),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"js实现链式结构调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js实现链式结构调用"}},[a._v("#")]),a._v(" js实现链式结构调用")]),a._v(" "),e("p",[a._v("昨天在线做了两道面试题，因为时间的缘故，第二道没来得及做，结束后找时间写了一遍，是js的函数链式调用，比较经典的例子是jQuery和ES6的promise，现在做个简单的笔记。题目描述就不写了，看例子就看的出来")]),a._v(" "),e("h2",{attrs:{id:"题目-实现一个-query-方法-实现对数据的链式查询和处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目-实现一个-query-方法-实现对数据的链式查询和处理"}},[a._v("#")]),a._v(" 题目：实现一个 query 方法，实现对数据的链式查询和处理")]),a._v(" "),e("h3",{attrs:{id:"_1、输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、输入"}},[a._v("#")]),a._v(" 1、输入")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const data = [\n  { name: 'foo', age: 16, city: 'shanghai' },\n  { name: 'bar', age: 24, city: 'hangzhou' },\n  { name: 'fiz', age: 22, city: 'shanghai' },\n  { name: 'baz', age: 19, city: 'hangzhou' }\n]\n\n")])])]),e("h3",{attrs:{id:"_2、调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、调用"}},[a._v("#")]),a._v(" 2、调用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('query(data)\n  .where((item) => item.age > 18)\n  .orderBy("age")\n  .groupBy("city")\n  .execute();\n')])])]),e("h3",{attrs:{id:"_3、输出-输出排序、筛选过的二维数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、输出-输出排序、筛选过的二维数组"}},[a._v("#")]),a._v(" 3、输出，输出排序、筛选过的二维数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('[\n    [\n        { "name": "baz", "age": 19, "city": "hangzhou" },\n        { "name": "bar", "age": 24, "city": "hangzhou" }\n    ],\n    [\n        { "name": "fiz", "age": 22, "city": "shanghai" }\n    ]\n]\n')])])]),e("h3",{attrs:{id:"_4、实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、实现"}},[a._v("#")]),a._v(" 4、实现")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function query(data) {\n    if (Object.prototype.toString.call(data)!== '[object Array]') {\n        return console.error('请输入数组')\n    }\n    function myArray(data) { \n        this.data = data\n        console.log(this.data);\n    }\n    myArray.prototype.where = function (predicate) {\n        this.data = this.data.filter(predicate);\n        return this\n    }\n    myArray.prototype.orderBy = function (key, desc = false) {\n        this.data = this.data.sort((a,b) =>  {\n            return desc ? b[key] - a[key] : a[key] - b[key]\n        })\n        return this\n    };\n    myArray.prototype.groupBy = function (key) {\n        let array = [];\n        let obj = {}\n        this.data.map(el => {\n            const objKey = el[key]\n            if(!obj[objKey]){\n                obj[objKey] = []\n            }\n            obj[objKey].push(el)\n        })\n        const keys = Object.keys(obj)\n        for(let i=0; i<keys.length; i++){\n            array.push(obj[keys[i]])\n        }\n        this.data = array\n        return this\n    };\n    myArray.prototype.execute = function () {\n        return this.data;\n    };\n    return new myArray(data)\n}\n\nconst data = [\n    { name: 'foo', age: 16, city: 'shanghai' },\n    { name: 'bar', age: 24, city: 'hangzhou' },\n    { name: 'fiz', age: 22, city: 'shanghai' },\n    { name: 'baz', age: 19, city: 'hangzhou' }\n    ]\nquery(data)\n.where((item) => item.age > 18)\n    .orderBy(\"age\")\n    .groupBy(\"city\")\n    .execute();\n")])])]),e("h3",{attrs:{id:"_5、小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、小结"}},[a._v("#")]),a._v(" 5、小结")]),a._v(" "),e("p",[a._v("链式的核心是获取到上一次调用函数的this对象，并在每个函数中返回this，这样后续调用才不会报错。并且函数需要提前在对象中建好，如以上代码所示")])])}),[],!1,null,null,null);t.default=r.exports}}]);